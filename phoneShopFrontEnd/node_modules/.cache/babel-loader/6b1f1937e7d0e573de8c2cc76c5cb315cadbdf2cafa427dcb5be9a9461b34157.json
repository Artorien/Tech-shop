{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { useState } from \"react\";\nexport const apiAll = createApi({\n  reducerPath: \"api\",\n  tagTypes: [\"TechProducts\"],\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:8080/product/\"\n  }),\n  endpoints: build => ({\n    getAllProducts: build.query({\n      query: ({\n        page = 0,\n        size = 9,\n        token = \"iPhone\"\n      }) => `all?page=${page}&size=${size}&productToken=${token}`,\n      providesTags: result => result.content ? [...result.content.map(({\n        id\n      }) => ({\n        type: \"TechProducts\",\n        id\n      })), \"TechProducts\"] : [\"TechProducts\"]\n    })\n  })\n});\nexport const apiCategory = createApi({\n  reducerPath: \"apiCategory\"\n});\n\n// export const { useGetAllProductsQuery } = api;\n\n// import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// export const api = createApi({\n//   reducerPath: \"api\",\n//   tagTypes: [\"TechProducts\"],\n//   baseQuery: fetchBaseQuery({\n//     baseUrl: \"http://localhost:8080/product/\",\n//     prepareHeaders: (headers, { getState }) => {\n//       console.log(getState());\n//       const token = getState(); // Assuming token is stored in auth slice\n//       if (token) {\n//         headers.set(\"Authorization\", `Bearer ${token}`);\n//       }\n//       return headers;\n//     },\n//   }),\n//   endpoints: (build) => ({\n//     getAllProducts: build.query({\n//       query: ({ page = 0, size = 9 }) => `all?page=${page}&size=${size}`,\n//       providesTags: (result) =>\n//         result?.content\n//           ? [\n//               ...result.content.map(({ id }) => ({ type: \"TechProducts\", id })),\n//               \"TechProducts\",\n//             ]\n//           : [\"TechProducts\"],\n//     }),\n//   }),\n// });\n\nexport const {\n  useGetAllProductsQuery\n} = apiAll;","map":{"version":3,"names":["createApi","fetchBaseQuery","useState","apiAll","reducerPath","tagTypes","baseQuery","baseUrl","endpoints","build","getAllProducts","query","page","size","token","providesTags","result","content","map","id","type","apiCategory","useGetAllProductsQuery"],"sources":["C:/Users/Sofronie/OneDrive/Рабочий стол/Программирование/Projects/Tech-Shop/Tech-shop/phoneShopFrontEnd/src/store/api.jsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport { useState } from \"react\";\r\n\r\nexport const apiAll = createApi({\r\n  reducerPath: \"api\",\r\n  tagTypes: [\"TechProducts\"],\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:8080/product/\" }),\r\n  endpoints: (build) => ({\r\n    getAllProducts: build.query({\r\n      query: ({ page = 0, size = 9, token = \"iPhone\" }) =>\r\n        `all?page=${page}&size=${size}&productToken=${token}`,\r\n      providesTags: (result) =>\r\n        result.content\r\n          ? [\r\n              ...result.content.map(({ id }) => ({ type: \"TechProducts\", id })),\r\n              \"TechProducts\",\r\n            ]\r\n          : [\"TechProducts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const apiCategory = createApi({\r\n  reducerPath: \"apiCategory\"\r\n})\r\n\r\n// export const { useGetAllProductsQuery } = api;\r\n\r\n// import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\n// export const api = createApi({\r\n//   reducerPath: \"api\",\r\n//   tagTypes: [\"TechProducts\"],\r\n//   baseQuery: fetchBaseQuery({\r\n//     baseUrl: \"http://localhost:8080/product/\",\r\n//     prepareHeaders: (headers, { getState }) => {\r\n//       console.log(getState());\r\n//       const token = getState(); // Assuming token is stored in auth slice\r\n//       if (token) {\r\n//         headers.set(\"Authorization\", `Bearer ${token}`);\r\n//       }\r\n//       return headers;\r\n//     },\r\n//   }),\r\n//   endpoints: (build) => ({\r\n//     getAllProducts: build.query({\r\n//       query: ({ page = 0, size = 9 }) => `all?page=${page}&size=${size}`,\r\n//       providesTags: (result) =>\r\n//         result?.content\r\n//           ? [\r\n//               ...result.content.map(({ id }) => ({ type: \"TechProducts\", id })),\r\n//               \"TechProducts\",\r\n//             ]\r\n//           : [\"TechProducts\"],\r\n//     }),\r\n//   }),\r\n// });\r\n\r\nexport const { useGetAllProductsQuery } = apiAll;\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AACxE,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,MAAM,GAAGH,SAAS,CAAC;EAC9BI,WAAW,EAAE,KAAK;EAClBC,QAAQ,EAAE,CAAC,cAAc,CAAC;EAC1BC,SAAS,EAAEL,cAAc,CAAC;IAAEM,OAAO,EAAE;EAAiC,CAAC,CAAC;EACxEC,SAAS,EAAGC,KAAK,KAAM;IACrBC,cAAc,EAAED,KAAK,CAACE,KAAK,CAAC;MAC1BA,KAAK,EAAEA,CAAC;QAAEC,IAAI,GAAG,CAAC;QAAEC,IAAI,GAAG,CAAC;QAAEC,KAAK,GAAG;MAAS,CAAC,KAC9C,YAAYF,IAAI,SAASC,IAAI,iBAAiBC,KAAK,EAAE;MACvDC,YAAY,EAAGC,MAAM,IACnBA,MAAM,CAACC,OAAO,GACV,CACE,GAAGD,MAAM,CAACC,OAAO,CAACC,GAAG,CAAC,CAAC;QAAEC;MAAG,CAAC,MAAM;QAAEC,IAAI,EAAE,cAAc;QAAED;MAAG,CAAC,CAAC,CAAC,EACjE,cAAc,CACf,GACD,CAAC,cAAc;IACvB,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAME,WAAW,GAAGrB,SAAS,CAAC;EACnCI,WAAW,EAAE;AACf,CAAC,CAAC;;AAEF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAM;EAAEkB;AAAuB,CAAC,GAAGnB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}